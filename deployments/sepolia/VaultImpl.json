{
  "address": "0xe9e3b0F1F45E20C41233644e50C2329dBDE44433",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_annexKeys",
          "type": "bytes[]"
        }
      ],
      "name": "SendLetter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "name": "TimeoutClaim",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC1155_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC20_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Annex[]",
          "name": "_annex",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_secretWords",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "buildId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "letterAllParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_annexAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_message",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_secretWords",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_password",
              "type": "string"
            }
          ],
          "internalType": "struct Vault.Letter",
          "name": "_letter",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Annex[]",
          "name": "_annexes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "name": "letterPublicParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Annex[]",
          "name": "_annex",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_secretWords",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "sendLetter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "timeoutClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb1709209f78b230f7adf93f0e14e88766a6b5822c23678ee1240fcc905988c25",
  "receipt": {
    "to": null,
    "from": "0x37D2AC60E6fB6B0c54969f75D10245Bff815bce3",
    "contractAddress": "0xe9e3b0F1F45E20C41233644e50C2329dBDE44433",
    "transactionIndex": 22,
    "gasUsed": "2303308",
    "logsBloom": "0x
    "blockHash": "0x59f719b63219858ec1252f8109ca9bb6f212483036580746fc6cb8ae2b61fce7",
    "transactionHash": "0xb1709209f78b230f7adf93f0e14e88766a6b5822c23678ee1240fcc905988c25",
    "logs": [],
    "blockNumber": 5441128,
    "cumulativeGasUsed": "8790379",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cbc77441dd975823ad4e80edfb21c34f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_annexKeys\",\"type\":\"bytes[]\"}],\"name\":\"SendLetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"name\":\"TimeoutClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1155_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Annex[]\",\"name\":\"_annex\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_secretWords\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"buildId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"letterAllParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_secretWords\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"internalType\":\"struct Vault.Letter\",\"name\":\"_letter\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Annex[]\",\"name\":\"_annexes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"name\":\"letterPublicParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Annex[]\",\"name\":\"_annex\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_secretWords\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"sendLetter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"timeoutClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\ncontract Vault is Initializable, ERC721Holder, ERC1155Holder {\\n    uint8 public constant ETH_TYPE = 0;\\n    uint8 public constant ERC20_TYPE = 1;\\n    uint8 public constant ERC721_TYPE = 2;\\n    uint8 public constant ERC1155_TYPE = 3;\\n\\n    event SendLetter(bytes32 _letterId, address _sender, address _receiver, bytes[] _annexKeys);\\n    event Claim(bytes32 _letterId);\\n    event TimeoutClaim(bytes32 _letterId);\\n\\n    struct Annex {\\n        uint8 _type;\\n        address _address;\\n        uint256 _amount;\\n        uint256 _id;\\n    }\\n\\n    struct Letter {\\n        address _sender;\\n        address _receiver;\\n        uint256 _annexAmount;\\n        uint256 _deadline;\\n        string _message;\\n        string _secretWords;\\n        string _password;\\n    }\\n\\n    mapping(bytes32 => Letter) private letters;\\n    mapping(string => bytes32) private passwords;\\n    mapping(bytes => Annex) private annex;\\n\\n    function initialize() public initializer {}\\n\\n    // ================== view function ==================\\n\\n    function letterPublicParams(bytes32 _letterId) external view returns (address _sender, address _receiver, string memory _message) {\\n        Letter memory _letter = letters[_letterId];\\n        _sender = _letter._sender;\\n        _receiver = _letter._receiver;\\n        _message = _letter._message;\\n    }\\n\\n    function letterAllParams(string memory _password) external view returns (Letter memory _letter, Annex[] memory _annexes) {\\n        bytes32 _id = passwords[_password];\\n        if (_id == bytes32(0)) return (_letter, _annexes);\\n\\n        _letter = letters[_id];\\n\\n        _annexes = new Annex[](_letter._annexAmount);\\n        for (uint256 _i = 0; _i < _letter._annexAmount; _i++) {\\n            _annexes[_i] = annex[abi.encodePacked(_id, _i)];\\n        }\\n    }\\n\\n    // ================== non-view function ==================\\n\\n    function sendLetter(\\n        Annex[] memory _annex,\\n        string memory _message,\\n        string memory _secretWords,\\n        string memory _password,\\n        address _receiver,\\n        uint256 _deadline\\n    ) external payable returns (bytes32 _letterId) {\\n        require(passwords[_password] == bytes32(0), \\\"Vault: Already exists\\\");\\n        _letterId = buildId(_annex, _message, _secretWords, _password, _receiver, _deadline);\\n\\n        bytes[] memory _keys = new bytes[](_annex.length);\\n\\n        for (uint256 _i = 0; _i < _annex.length; _i++) {\\n            if (_annex[_i]._type == ETH_TYPE) require(msg.value >= _annex[_i]._amount, \\\"Vault: Insufficient amount of eth\\\");\\n            if (_annex[_i]._type == ERC20_TYPE) IERC20(_annex[_i]._address).transferFrom(msg.sender, address(this), _annex[_i]._amount);\\n            if (_annex[_i]._type == ERC721_TYPE) IERC721(_annex[_i]._address).transferFrom(msg.sender, address(this), _annex[_i]._id);\\n            if (_annex[_i]._type == ERC1155_TYPE) IERC1155(_annex[_i]._address).safeTransferFrom(msg.sender, address(this), _annex[_i]._id, _annex[_i]._amount, new bytes(0));\\n            bytes memory _annexKey = abi.encodePacked(_letterId, _i);\\n            annex[_annexKey] = _annex[_i];\\n            _keys[_i] = _annexKey;\\n        }\\n\\n        Letter memory _letter = Letter({\\n            _sender: msg.sender,\\n            _annexAmount: _annex.length,\\n            _receiver: _receiver,\\n            _message: _message,\\n            _secretWords: _secretWords,\\n            _password: _password,\\n            _deadline: _deadline\\n        });\\n        letters[_letterId] = _letter;\\n        emit SendLetter(_letterId, msg.sender, _receiver, _keys);\\n    }\\n\\n    function claim(string memory _password) external {\\n        bytes32 _id = passwords[_password];\\n        require(_id != bytes32(0), \\\"Vault: This vault does not exist\\\");\\n\\n        Letter memory _letter = letters[_id];\\n        delete letters[_id];\\n        delete passwords[_password];\\n\\n        require(_letter._receiver == msg.sender, \\\"Vault: You are not the recipient\\\");\\n        require(_letter._deadline > block.timestamp, \\\"Vault: Letter has timed out\\\");\\n\\n        for (uint256 _i = 0; _i < _letter._annexAmount; _i++) {\\n            bytes memory _annexId = abi.encodePacked(_id, _i);\\n            Annex memory _annex = annex[_annexId];\\n            if (_annex._type == ETH_TYPE) payable(msg.sender).transfer(_annex._amount);\\n            if (_annex._type == ERC20_TYPE) IERC20(_annex._address).transfer(msg.sender, _annex._amount);\\n            if (_annex._type == ERC721_TYPE) IERC721(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id);\\n            if (_annex._type == ERC1155_TYPE) IERC1155(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id, _annex._amount, new bytes(0));\\n            delete annex[_annexId];\\n        }\\n        emit Claim(_id);\\n    }\\n\\n    function timeoutClaim(string memory _password) external {\\n        bytes32 _id = passwords[_password];\\n        require(_id != bytes32(0), \\\"Vault: This vault does not exist\\\");\\n\\n        Letter memory _letter = letters[_id];\\n        delete letters[_id];\\n        delete passwords[_password];\\n\\n        require(_letter._sender == msg.sender, \\\"Vault: You are not the sender\\\");\\n        require(_letter._deadline < block.timestamp, \\\"Vault: The letter has not expired yet\\\");\\n\\n        for (uint256 _i = 0; _i < _letter._annexAmount; _i++) {\\n            bytes memory _annexId = abi.encodePacked(_id, _i);\\n            Annex memory _annex = annex[_annexId];\\n            if (_annex._type == ETH_TYPE) payable(msg.sender).transfer(_annex._amount);\\n            if (_annex._type == ERC20_TYPE) IERC20(_annex._address).transfer(msg.sender, _annex._amount);\\n            if (_annex._type == ERC721_TYPE) IERC721(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id);\\n            if (_annex._type == ERC1155_TYPE) IERC1155(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id, _annex._amount, new bytes(0));\\n            delete annex[_annexId];\\n        }\\n        emit TimeoutClaim(_id);\\n    }\\n\\n    function buildId(Annex[] memory _annex, string memory _message, string memory _secretWords, string memory _password, address _receiver, uint256 _deadline) public view returns (bytes32) {\\n        return keccak256(abi.encode(_annex, _message, _secretWords, _password, _receiver, _deadline, block.prevrandao, block.timestamp));\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x37cedd9cb2a8d03c055937264b395f4ec323f3b1dce13c979cac3d34d66fc94e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128b1806100206000396000f3fe6080604052600436106100ec5760003560e01c80638129fc1c1161008a578063bc197c8111610059578063bc197c811461028c578063f23a6e61146102b8578063f2c11eb7146102e4578063f3fe12c91461030457600080fd5b80638129fc1c1461021f5780638fa9c80014610236578063916e4ed114610257578063ad17456c1461026c57600080fd5b8063527dbe14116100c6578063527dbe14146101985780635a83151a146101c75780636f3769c0146101f557806372798a891461020a57600080fd5b806301ffc9a7146100f8578063150b7a021461012d5780632480aa421461017157600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004611ecb565b610324565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b50610158610148366004611ff5565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b50610186600081565b60405160ff9091168152602001610124565b3480156101a457600080fd5b506101b86101b336600461205c565b61035b565b604051610124939291906120c5565b3480156101d357600080fd5b506101e76101e23660046120fa565b610588565b60405161012492919061219d565b34801561020157600080fd5b50610186600181565b34801561021657600080fd5b50610186600281565b34801561022b57600080fd5b5061023461094a565b005b61024961024436600461231d565b610a4e565b604051908152602001610124565b34801561026357600080fd5b50610186600381565b34801561027857600080fd5b506102346102873660046120fa565b61108c565b34801561029857600080fd5b506101586102a736600461243d565b63bc197c8160e01b95945050505050565b3480156102c457600080fd5b506101586102d33660046124e6565b63f23a6e6160e01b95945050505050565b3480156102f057600080fd5b506102496102ff36600461231d565b611765565b34801561031057600080fd5b5061023461031f3660046120fa565b6117a8565b60006001600160e01b03198216630271189760e51b148061035557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600081815260208181526040808320815160e08101835281546001600160a01b0390811682526001830154169381019390935260028101549183019190915260038101546060838101919091526004820180548594929385939290916080840191906103c69061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546103f29061254a565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050505081526020016005820180546104589061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546104849061254a565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081526020016006820180546104ea9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546105169061254a565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b5050509190925250508151602083015160809093015190989297509550909350505050565b6105da6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081525090565b606060006001846040516105ee9190612584565b9081526040519081900360200190205490508061060b5750915091565b60008181526020818152604091829020825160e08101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003820154606082015260048201805491929160808401919061066d9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061254a565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b505050505081526020016005820180546106ff9061254a565b80601f016020809104026020016040519081016040528092919081815260200182805461072b9061254a565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b505050505081526020016006820180546107919061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd9061254a565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b505050505081525050925082604001516001600160401b0381111561083157610831611f18565b60405190808252806020026020018201604052801561088357816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161084f5790505b50915060005b836040015181101561094357604080516020810184905290810182905260029060600160408051601f19818403018152908290526108c691612584565b908152604080519182900360209081018320608084018352805460ff811685526001600160a01b0361010090910416918401919091526001810154918301919091526002015460608201528351849083908110610925576109256125a0565b6020026020010181905250808061093b906125b6565b915050610889565b5050915091565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561098f5750825b90506000826001600160401b031660011480156109ab5750303b155b9050811580156109b9575080155b156109d75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a0157845460ff60401b1916600160401b1785555b8315610a4757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b60008060001b600185604051610a649190612584565b90815260200160405180910390205414610abd5760405162461bcd60e51b81526020600482015260156024820152745661756c743a20416c72656164792065786973747360581b60448201526064015b60405180910390fd5b610acb878787878787611765565b9050600087516001600160401b03811115610ae857610ae8611f18565b604051908082528060200260200182016040528015610b1b57816020015b6060815260200190600190039081610b065790505b50905060005b8851811015610f7557600060ff16898281518110610b4157610b416125a0565b60200260200101516000015160ff1603610bcc57888181518110610b6757610b676125a0565b602002602001015160400151341015610bcc5760405162461bcd60e51b815260206004820152602160248201527f5661756c743a20496e73756666696369656e7420616d6f756e74206f662065746044820152600d60fb1b6064820152608401610ab4565b600160ff16898281518110610be357610be36125a0565b60200260200101516000015160ff1603610ca657888181518110610c0957610c096125a0565b6020026020010151602001516001600160a01b03166323b872dd33308c8581518110610c3757610c376125a0565b6020026020010151604001516040518463ffffffff1660e01b8152600401610c61939291906125dd565b6020604051808303816000875af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190612601565b505b600260ff16898281518110610cbd57610cbd6125a0565b60200260200101516000015160ff1603610d6e57888181518110610ce357610ce36125a0565b6020026020010151602001516001600160a01b03166323b872dd33308c8581518110610d1157610d116125a0565b6020026020010151606001516040518463ffffffff1660e01b8152600401610d3b939291906125dd565b600060405180830381600087803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b505050505b600360ff16898281518110610d8557610d856125a0565b60200260200101516000015160ff1603610e9a57888181518110610dab57610dab6125a0565b6020026020010151602001516001600160a01b031663f242432a33308c8581518110610dd957610dd96125a0565b6020026020010151606001518d8681518110610df757610df76125a0565b60200260200101516040015160006001600160401b03811115610e1c57610e1c611f18565b6040519080825280601f01601f191660200182016040528015610e46576020820181803683370190505b506040518663ffffffff1660e01b8152600401610e67959493929190612623565b600060405180830381600087803b158015610e8157600080fd5b505af1158015610e95573d6000803e3d6000fd5b505050505b60408051602081018590529081018290526000906060016040516020818303038152906040529050898281518110610ed457610ed46125a0565b6020026020010151600282604051610eec9190612584565b9081526040805191829003602090810190922083518154938501516001600160a01b0316610100026001600160a81b031990941660ff90911617929092178255820151600182015560609091015160029091015582518190849084908110610f5657610f566125a0565b6020026020010181905250508080610f6d906125b6565b915050610b21565b506040805160e0810182523381526001600160a01b0386811660208084019182528c5184860190815260608501898152608086018e815260a087018e905260c087018d905260008a81529384905296909220855181549086166001600160a01b03199182161782559351600182018054919096169416939093179093559151600282015590516003820155915190918291600482019061101590826126b7565b5060a0820151600582019061102a90826126b7565b5060c0820151600682019061103f90826126b7565b509050507fe681dee53a4e870bcaef63970bc1fb77925267c7e4c14f60e54725272d8cb798833387856040516110789493929190612776565b60405180910390a150509695505050505050565b600060018260405161109e9190612584565b908152604051908190036020019020549050806110fd5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2054686973207661756c7420646f6573206e6f742065786973746044820152606401610ab4565b600081815260208181526040808320815160e08101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083015260048101805460808401919061115b9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546111879061254a565b80156111d45780601f106111a9576101008083540402835291602001916111d4565b820191906000526020600020905b8154815290600101906020018083116111b757829003601f168201915b505050505081526020016005820180546111ed9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546112199061254a565b80156112665780601f1061123b57610100808354040283529160200191611266565b820191906000526020600020905b81548152906001019060200180831161124957829003601f168201915b5050505050815260200160068201805461127f9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546112ab9061254a565b80156112f85780601f106112cd576101008083540402835291602001916112f8565b820191906000526020600020905b8154815290600101906020018083116112db57829003601f168201915b50505091909252505050600083815260208190526040812080546001600160a01b03199081168255600182018054909116905560028101829055600381018290559192506113496004830182611e75565b611357600583016000611e75565b611365600683016000611e75565b50506001836040516113779190612584565b9081526040519081900360200190206000905580516001600160a01b031633146113e35760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a20596f7520617265206e6f74207468652073656e6465720000006044820152606401610ab4565b428160600151106114445760405162461bcd60e51b815260206004820152602560248201527f5661756c743a20546865206c657474657220686173206e6f742065787069726560448201526419081e595d60da1b6064820152608401610ab4565b60005b816040015181101561172b5760408051602081018590529081018290526000906060016040516020818303038152906040529050600060028260405161148d9190612584565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150611512576040808201519051339180156108fc02916000818181858888f19350505050158015611510573d6000803e3d6000fd5b505b805160ff166000190161159e576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190612601565b505b805160ff16600119016116175760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e916115e491309133916004016125dd565b600060405180830381600087803b1580156115fe57600080fd5b505af1158015611612573d6000803e3d6000fd5b505050505b805160ff16600219016116da5780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561165c5761165c611f18565b6040519080825280601f01601f191660200182016040528015611686576020820181803683370190505b506040518663ffffffff1660e01b81526004016116a7959493929190612623565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050505b6002826040516116ea9190612584565b90815260405190819003602001902080546001600160a81b031916815560006001820181905560029091015550819050611723816125b6565b915050611447565b506040518281527fb7b05d3a6508c3fc98e29961e39eff690a7e939862c71ad741250a5d2d30d04c906020015b60405180910390a1505050565b600086868686868644426040516020016117869897969594939291906127fa565b6040516020818303038152906040528051906020012090509695505050505050565b60006001826040516117ba9190612584565b908152604051908190036020019020549050806118195760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2054686973207661756c7420646f6573206e6f742065786973746044820152606401610ab4565b600081815260208181526040808320815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015460608301526004810180546080840191906118779061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546118a39061254a565b80156118f05780601f106118c5576101008083540402835291602001916118f0565b820191906000526020600020905b8154815290600101906020018083116118d357829003601f168201915b505050505081526020016005820180546119099061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546119359061254a565b80156119825780601f1061195757610100808354040283529160200191611982565b820191906000526020600020905b81548152906001019060200180831161196557829003601f168201915b5050505050815260200160068201805461199b9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546119c79061254a565b8015611a145780601f106119e957610100808354040283529160200191611a14565b820191906000526020600020905b8154815290600101906020018083116119f757829003601f168201915b50505091909252505050600083815260208190526040812080546001600160a01b0319908116825560018201805490911690556002810182905560038101829055919250611a656004830182611e75565b611a73600583016000611e75565b611a81600683016000611e75565b5050600183604051611a939190612584565b908152602001604051809103902060009055336001600160a01b031681602001516001600160a01b031614611b0a5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20596f7520617265206e6f742074686520726563697069656e746044820152606401610ab4565b42816060015111611b5d5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a204c6574746572206861732074696d6564206f757400000000006044820152606401610ab4565b60005b8160400151811015611e4457604080516020810185905290810182905260009060600160405160208183030381529060405290506000600282604051611ba69190612584565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150611c2b576040808201519051339180156108fc02916000818181858888f19350505050158015611c29573d6000803e3d6000fd5b505b805160ff1660001901611cb7576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190612601565b505b805160ff1660011901611d305760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e91611cfd91309133916004016125dd565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050505b805160ff1660021901611df35780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b03811115611d7557611d75611f18565b6040519080825280601f01601f191660200182016040528015611d9f576020820181803683370190505b506040518663ffffffff1660e01b8152600401611dc0959493929190612623565b600060405180830381600087803b158015611dda57600080fd5b505af1158015611dee573d6000803e3d6000fd5b505050505b600282604051611e039190612584565b90815260405190819003602001902080546001600160a81b031916815560006001820181905560029091015550819050611e3c816125b6565b915050611b60565b506040518281527f8c1d64e3bd87387709175b9ef4e7a1d7a8364559fc0e2ad9d77953909a0d1eb390602001611758565b508054611e819061254a565b6000825580601f10611e91575050565b601f016020900490600052602060002090810190611eaf9190611eb2565b50565b5b80821115611ec75760008155600101611eb3565b5090565b600060208284031215611edd57600080fd5b81356001600160e01b031981168114611ef557600080fd5b9392505050565b80356001600160a01b0381168114611f1357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611f5057611f50611f18565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611f7e57611f7e611f18565b604052919050565b600082601f830112611f9757600080fd5b81356001600160401b03811115611fb057611fb0611f18565b611fc3601f8201601f1916602001611f56565b818152846020838601011115611fd857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561200b57600080fd5b61201485611efc565b935061202260208601611efc565b92506040850135915060608501356001600160401b0381111561204457600080fd5b61205087828801611f86565b91505092959194509250565b60006020828403121561206e57600080fd5b5035919050565b60005b83811015612090578181015183820152602001612078565b50506000910152565b600081518084526120b1816020860160208601612075565b601f01601f19169290920160200192915050565b6001600160a01b038481168252831660208201526060604082018190526000906120f190830184612099565b95945050505050565b60006020828403121561210c57600080fd5b81356001600160401b0381111561212257600080fd5b61212e84828501611f86565b949350505050565b600081518084526020808501945080840160005b83811015612192578151805160ff168852838101516001600160a01b03168489015260408082015190890152606090810151908801526080909601959082019060010161214a565b509495945050505050565b60408152600060018060a01b038085511660408401528060208601511660608401525060408401516080830152606084015160a0830152608084015160e060c08401526121ee610120840182612099565b905060a0850151603f19808584030160e086015261220c8383612099565b925060c0870151915080858403016101008601525061222b8282612099565b91505082810360208401526120f18185612136565b60006001600160401b0382111561225957612259611f18565b5060051b60200190565b600082601f83011261227457600080fd5b8135602061228961228483612240565b611f56565b82815260079290921b840181019181810190868411156122a857600080fd5b8286015b8481101561231257608081890312156122c55760008081fd5b6122cd611f2e565b813560ff811681146122df5760008081fd5b81526122ec828601611efc565b8186015260408281013590820152606080830135908201528352918301916080016122ac565b509695505050505050565b60008060008060008060c0878903121561233657600080fd5b86356001600160401b038082111561234d57600080fd5b6123598a838b01612263565b9750602089013591508082111561236f57600080fd5b61237b8a838b01611f86565b9650604089013591508082111561239157600080fd5b61239d8a838b01611f86565b955060608901359150808211156123b357600080fd5b506123c089828a01611f86565b9350506123cf60808801611efc565b915060a087013590509295509295509295565b600082601f8301126123f357600080fd5b8135602061240361228483612240565b82815260059290921b8401810191818101908684111561242257600080fd5b8286015b848110156123125780358352918301918301612426565b600080600080600060a0868803121561245557600080fd5b61245e86611efc565b945061246c60208701611efc565b935060408601356001600160401b038082111561248857600080fd5b61249489838a016123e2565b945060608801359150808211156124aa57600080fd5b6124b689838a016123e2565b935060808801359150808211156124cc57600080fd5b506124d988828901611f86565b9150509295509295909350565b600080600080600060a086880312156124fe57600080fd5b61250786611efc565b945061251560208701611efc565b9350604086013592506060860135915060808601356001600160401b0381111561253e57600080fd5b6124d988828901611f86565b600181811c9082168061255e57607f821691505b60208210810361257e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612596818460208701612075565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016125d657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561261357600080fd5b81518015158114611ef557600080fd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061265d90830184612099565b979650505050505050565b601f8211156126b257600081815260208120601f850160051c8101602086101561268f5750805b601f850160051c820191505b818110156126ae5782815560010161269b565b5050505b505050565b81516001600160401b038111156126d0576126d0611f18565b6126e4816126de845461254a565b84612668565b602080601f83116001811461271957600084156127015750858301515b600019600386901b1c1916600185901b1785556126ae565b600085815260208120601f198616915b8281101561274857888601518255948401946001909101908401612729565b50858210156127665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060808201868352602060018060a01b03808816828601528087166040860152506080606085015281855180845260a08601915060a08160051b870101935082870160005b828110156127ea57609f198887030184526127d8868351612099565b955092840192908401906001016127bc565b50939a9950505050505050505050565b600061010080835261280e8184018c612136565b90508281036020840152612822818b612099565b90508281036040840152612836818a612099565b9050828103606084015261284a8189612099565b6001600160a01b03979097166080840152505060a081019390935260c083019190915260e09091015294935050505056fea264697066735822122056085b4d21bdb0f41c1c495dcda743a3fe46345555a7b8e9ce716bd5de62010b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80638129fc1c1161008a578063bc197c8111610059578063bc197c811461028c578063f23a6e61146102b8578063f2c11eb7146102e4578063f3fe12c91461030457600080fd5b80638129fc1c1461021f5780638fa9c80014610236578063916e4ed114610257578063ad17456c1461026c57600080fd5b8063527dbe14116100c6578063527dbe14146101985780635a83151a146101c75780636f3769c0146101f557806372798a891461020a57600080fd5b806301ffc9a7146100f8578063150b7a021461012d5780632480aa421461017157600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004611ecb565b610324565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b50610158610148366004611ff5565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b50610186600081565b60405160ff9091168152602001610124565b3480156101a457600080fd5b506101b86101b336600461205c565b61035b565b604051610124939291906120c5565b3480156101d357600080fd5b506101e76101e23660046120fa565b610588565b60405161012492919061219d565b34801561020157600080fd5b50610186600181565b34801561021657600080fd5b50610186600281565b34801561022b57600080fd5b5061023461094a565b005b61024961024436600461231d565b610a4e565b604051908152602001610124565b34801561026357600080fd5b50610186600381565b34801561027857600080fd5b506102346102873660046120fa565b61108c565b34801561029857600080fd5b506101586102a736600461243d565b63bc197c8160e01b95945050505050565b3480156102c457600080fd5b506101586102d33660046124e6565b63f23a6e6160e01b95945050505050565b3480156102f057600080fd5b506102496102ff36600461231d565b611765565b34801561031057600080fd5b5061023461031f3660046120fa565b6117a8565b60006001600160e01b03198216630271189760e51b148061035557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600081815260208181526040808320815160e08101835281546001600160a01b0390811682526001830154169381019390935260028101549183019190915260038101546060838101919091526004820180548594929385939290916080840191906103c69061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546103f29061254a565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050505081526020016005820180546104589061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546104849061254a565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081526020016006820180546104ea9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546105169061254a565b80156105635780601f1061053857610100808354040283529160200191610563565b820191906000526020600020905b81548152906001019060200180831161054657829003601f168201915b5050509190925250508151602083015160809093015190989297509550909350505050565b6105da6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081525090565b606060006001846040516105ee9190612584565b9081526040519081900360200190205490508061060b5750915091565b60008181526020818152604091829020825160e08101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003820154606082015260048201805491929160808401919061066d9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061254a565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b505050505081526020016005820180546106ff9061254a565b80601f016020809104026020016040519081016040528092919081815260200182805461072b9061254a565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b505050505081526020016006820180546107919061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd9061254a565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b505050505081525050925082604001516001600160401b0381111561083157610831611f18565b60405190808252806020026020018201604052801561088357816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161084f5790505b50915060005b836040015181101561094357604080516020810184905290810182905260029060600160408051601f19818403018152908290526108c691612584565b908152604080519182900360209081018320608084018352805460ff811685526001600160a01b0361010090910416918401919091526001810154918301919091526002015460608201528351849083908110610925576109256125a0565b6020026020010181905250808061093b906125b6565b915050610889565b5050915091565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b031660008115801561098f5750825b90506000826001600160401b031660011480156109ab5750303b155b9050811580156109b9575080155b156109d75760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a0157845460ff60401b1916600160401b1785555b8315610a4757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b60008060001b600185604051610a649190612584565b90815260200160405180910390205414610abd5760405162461bcd60e51b81526020600482015260156024820152745661756c743a20416c72656164792065786973747360581b60448201526064015b60405180910390fd5b610acb878787878787611765565b9050600087516001600160401b03811115610ae857610ae8611f18565b604051908082528060200260200182016040528015610b1b57816020015b6060815260200190600190039081610b065790505b50905060005b8851811015610f7557600060ff16898281518110610b4157610b416125a0565b60200260200101516000015160ff1603610bcc57888181518110610b6757610b676125a0565b602002602001015160400151341015610bcc5760405162461bcd60e51b815260206004820152602160248201527f5661756c743a20496e73756666696369656e7420616d6f756e74206f662065746044820152600d60fb1b6064820152608401610ab4565b600160ff16898281518110610be357610be36125a0565b60200260200101516000015160ff1603610ca657888181518110610c0957610c096125a0565b6020026020010151602001516001600160a01b03166323b872dd33308c8581518110610c3757610c376125a0565b6020026020010151604001516040518463ffffffff1660e01b8152600401610c61939291906125dd565b6020604051808303816000875af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190612601565b505b600260ff16898281518110610cbd57610cbd6125a0565b60200260200101516000015160ff1603610d6e57888181518110610ce357610ce36125a0565b6020026020010151602001516001600160a01b03166323b872dd33308c8581518110610d1157610d116125a0565b6020026020010151606001516040518463ffffffff1660e01b8152600401610d3b939291906125dd565b600060405180830381600087803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b505050505b600360ff16898281518110610d8557610d856125a0565b60200260200101516000015160ff1603610e9a57888181518110610dab57610dab6125a0565b6020026020010151602001516001600160a01b031663f242432a33308c8581518110610dd957610dd96125a0565b6020026020010151606001518d8681518110610df757610df76125a0565b60200260200101516040015160006001600160401b03811115610e1c57610e1c611f18565b6040519080825280601f01601f191660200182016040528015610e46576020820181803683370190505b506040518663ffffffff1660e01b8152600401610e67959493929190612623565b600060405180830381600087803b158015610e8157600080fd5b505af1158015610e95573d6000803e3d6000fd5b505050505b60408051602081018590529081018290526000906060016040516020818303038152906040529050898281518110610ed457610ed46125a0565b6020026020010151600282604051610eec9190612584565b9081526040805191829003602090810190922083518154938501516001600160a01b0316610100026001600160a81b031990941660ff90911617929092178255820151600182015560609091015160029091015582518190849084908110610f5657610f566125a0565b6020026020010181905250508080610f6d906125b6565b915050610b21565b506040805160e0810182523381526001600160a01b0386811660208084019182528c5184860190815260608501898152608086018e815260a087018e905260c087018d905260008a81529384905296909220855181549086166001600160a01b03199182161782559351600182018054919096169416939093179093559151600282015590516003820155915190918291600482019061101590826126b7565b5060a0820151600582019061102a90826126b7565b5060c0820151600682019061103f90826126b7565b509050507fe681dee53a4e870bcaef63970bc1fb77925267c7e4c14f60e54725272d8cb798833387856040516110789493929190612776565b60405180910390a150509695505050505050565b600060018260405161109e9190612584565b908152604051908190036020019020549050806110fd5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2054686973207661756c7420646f6573206e6f742065786973746044820152606401610ab4565b600081815260208181526040808320815160e08101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083015260048101805460808401919061115b9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546111879061254a565b80156111d45780601f106111a9576101008083540402835291602001916111d4565b820191906000526020600020905b8154815290600101906020018083116111b757829003601f168201915b505050505081526020016005820180546111ed9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546112199061254a565b80156112665780601f1061123b57610100808354040283529160200191611266565b820191906000526020600020905b81548152906001019060200180831161124957829003601f168201915b5050505050815260200160068201805461127f9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546112ab9061254a565b80156112f85780601f106112cd576101008083540402835291602001916112f8565b820191906000526020600020905b8154815290600101906020018083116112db57829003601f168201915b50505091909252505050600083815260208190526040812080546001600160a01b03199081168255600182018054909116905560028101829055600381018290559192506113496004830182611e75565b611357600583016000611e75565b611365600683016000611e75565b50506001836040516113779190612584565b9081526040519081900360200190206000905580516001600160a01b031633146113e35760405162461bcd60e51b815260206004820152601d60248201527f5661756c743a20596f7520617265206e6f74207468652073656e6465720000006044820152606401610ab4565b428160600151106114445760405162461bcd60e51b815260206004820152602560248201527f5661756c743a20546865206c657474657220686173206e6f742065787069726560448201526419081e595d60da1b6064820152608401610ab4565b60005b816040015181101561172b5760408051602081018590529081018290526000906060016040516020818303038152906040529050600060028260405161148d9190612584565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150611512576040808201519051339180156108fc02916000818181858888f19350505050158015611510573d6000803e3d6000fd5b505b805160ff166000190161159e576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c9190612601565b505b805160ff16600119016116175760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e916115e491309133916004016125dd565b600060405180830381600087803b1580156115fe57600080fd5b505af1158015611612573d6000803e3d6000fd5b505050505b805160ff16600219016116da5780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561165c5761165c611f18565b6040519080825280601f01601f191660200182016040528015611686576020820181803683370190505b506040518663ffffffff1660e01b81526004016116a7959493929190612623565b600060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050505b6002826040516116ea9190612584565b90815260405190819003602001902080546001600160a81b031916815560006001820181905560029091015550819050611723816125b6565b915050611447565b506040518281527fb7b05d3a6508c3fc98e29961e39eff690a7e939862c71ad741250a5d2d30d04c906020015b60405180910390a1505050565b600086868686868644426040516020016117869897969594939291906127fa565b6040516020818303038152906040528051906020012090509695505050505050565b60006001826040516117ba9190612584565b908152604051908190036020019020549050806118195760405162461bcd60e51b815260206004820181905260248201527f5661756c743a2054686973207661756c7420646f6573206e6f742065786973746044820152606401610ab4565b600081815260208181526040808320815160e08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015460608301526004810180546080840191906118779061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546118a39061254a565b80156118f05780601f106118c5576101008083540402835291602001916118f0565b820191906000526020600020905b8154815290600101906020018083116118d357829003601f168201915b505050505081526020016005820180546119099061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546119359061254a565b80156119825780601f1061195757610100808354040283529160200191611982565b820191906000526020600020905b81548152906001019060200180831161196557829003601f168201915b5050505050815260200160068201805461199b9061254a565b80601f01602080910402602001604051908101604052809291908181526020018280546119c79061254a565b8015611a145780601f106119e957610100808354040283529160200191611a14565b820191906000526020600020905b8154815290600101906020018083116119f757829003601f168201915b50505091909252505050600083815260208190526040812080546001600160a01b0319908116825560018201805490911690556002810182905560038101829055919250611a656004830182611e75565b611a73600583016000611e75565b611a81600683016000611e75565b5050600183604051611a939190612584565b908152602001604051809103902060009055336001600160a01b031681602001516001600160a01b031614611b0a5760405162461bcd60e51b815260206004820181905260248201527f5661756c743a20596f7520617265206e6f742074686520726563697069656e746044820152606401610ab4565b42816060015111611b5d5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a204c6574746572206861732074696d6564206f757400000000006044820152606401610ab4565b60005b8160400151811015611e4457604080516020810185905290810182905260009060600160405160208183030381529060405290506000600282604051611ba69190612584565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150611c2b576040808201519051339180156108fc02916000818181858888f19350505050158015611c29573d6000803e3d6000fd5b505b805160ff1660001901611cb7576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190612601565b505b805160ff1660011901611d305760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e91611cfd91309133916004016125dd565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050505b805160ff1660021901611df35780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b03811115611d7557611d75611f18565b6040519080825280601f01601f191660200182016040528015611d9f576020820181803683370190505b506040518663ffffffff1660e01b8152600401611dc0959493929190612623565b600060405180830381600087803b158015611dda57600080fd5b505af1158015611dee573d6000803e3d6000fd5b505050505b600282604051611e039190612584565b90815260405190819003602001902080546001600160a81b031916815560006001820181905560029091015550819050611e3c816125b6565b915050611b60565b506040518281527f8c1d64e3bd87387709175b9ef4e7a1d7a8364559fc0e2ad9d77953909a0d1eb390602001611758565b508054611e819061254a565b6000825580601f10611e91575050565b601f016020900490600052602060002090810190611eaf9190611eb2565b50565b5b80821115611ec75760008155600101611eb3565b5090565b600060208284031215611edd57600080fd5b81356001600160e01b031981168114611ef557600080fd5b9392505050565b80356001600160a01b0381168114611f1357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611f5057611f50611f18565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611f7e57611f7e611f18565b604052919050565b600082601f830112611f9757600080fd5b81356001600160401b03811115611fb057611fb0611f18565b611fc3601f8201601f1916602001611f56565b818152846020838601011115611fd857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561200b57600080fd5b61201485611efc565b935061202260208601611efc565b92506040850135915060608501356001600160401b0381111561204457600080fd5b61205087828801611f86565b91505092959194509250565b60006020828403121561206e57600080fd5b5035919050565b60005b83811015612090578181015183820152602001612078565b50506000910152565b600081518084526120b1816020860160208601612075565b601f01601f19169290920160200192915050565b6001600160a01b038481168252831660208201526060604082018190526000906120f190830184612099565b95945050505050565b60006020828403121561210c57600080fd5b81356001600160401b0381111561212257600080fd5b61212e84828501611f86565b949350505050565b600081518084526020808501945080840160005b83811015612192578151805160ff168852838101516001600160a01b03168489015260408082015190890152606090810151908801526080909601959082019060010161214a565b509495945050505050565b60408152600060018060a01b038085511660408401528060208601511660608401525060408401516080830152606084015160a0830152608084015160e060c08401526121ee610120840182612099565b905060a0850151603f19808584030160e086015261220c8383612099565b925060c0870151915080858403016101008601525061222b8282612099565b91505082810360208401526120f18185612136565b60006001600160401b0382111561225957612259611f18565b5060051b60200190565b600082601f83011261227457600080fd5b8135602061228961228483612240565b611f56565b82815260079290921b840181019181810190868411156122a857600080fd5b8286015b8481101561231257608081890312156122c55760008081fd5b6122cd611f2e565b813560ff811681146122df5760008081fd5b81526122ec828601611efc565b8186015260408281013590820152606080830135908201528352918301916080016122ac565b509695505050505050565b60008060008060008060c0878903121561233657600080fd5b86356001600160401b038082111561234d57600080fd5b6123598a838b01612263565b9750602089013591508082111561236f57600080fd5b61237b8a838b01611f86565b9650604089013591508082111561239157600080fd5b61239d8a838b01611f86565b955060608901359150808211156123b357600080fd5b506123c089828a01611f86565b9350506123cf60808801611efc565b915060a087013590509295509295509295565b600082601f8301126123f357600080fd5b8135602061240361228483612240565b82815260059290921b8401810191818101908684111561242257600080fd5b8286015b848110156123125780358352918301918301612426565b600080600080600060a0868803121561245557600080fd5b61245e86611efc565b945061246c60208701611efc565b935060408601356001600160401b038082111561248857600080fd5b61249489838a016123e2565b945060608801359150808211156124aa57600080fd5b6124b689838a016123e2565b935060808801359150808211156124cc57600080fd5b506124d988828901611f86565b9150509295509295909350565b600080600080600060a086880312156124fe57600080fd5b61250786611efc565b945061251560208701611efc565b9350604086013592506060860135915060808601356001600160401b0381111561253e57600080fd5b6124d988828901611f86565b600181811c9082168061255e57607f821691505b60208210810361257e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612596818460208701612075565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016125d657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561261357600080fd5b81518015158114611ef557600080fd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061265d90830184612099565b979650505050505050565b601f8211156126b257600081815260208120601f850160051c8101602086101561268f5750805b601f850160051c820191505b818110156126ae5782815560010161269b565b5050505b505050565b81516001600160401b038111156126d0576126d0611f18565b6126e4816126de845461254a565b84612668565b602080601f83116001811461271957600084156127015750858301515b600019600386901b1c1916600185901b1785556126ae565b600085815260208120601f198616915b8281101561274857888601518255948401946001909101908401612729565b50858210156127665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060808201868352602060018060a01b03808816828601528087166040860152506080606085015281855180845260a08601915060a08160051b870101935082870160005b828110156127ea57609f198887030184526127d8868351612099565b955092840192908401906001016127bc565b50939a9950505050505050505050565b600061010080835261280e8184018c612136565b90508281036020840152612822818b612099565b90508281036040840152612836818a612099565b9050828103606084015261284a8189612099565b6001600160a01b03979097166080840152505060a081019390935260c083019190915260e09091015294935050505056fea264697066735822122056085b4d21bdb0f41c1c495dcda743a3fe46345555a7b8e9ce716bd5de62010b64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 849,
        "contract": "contracts/Vault.sol:Vault",
        "label": "letters",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Letter)844_storage)"
      },
      {
        "astId": 853,
        "contract": "contracts/Vault.sol:Vault",
        "label": "passwords",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      {
        "astId": 858,
        "contract": "contracts/Vault.sol:Vault",
        "label": "annex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(Annex)829_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Letter)844_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Vault.Letter)",
        "numberOfBytes": "32",
        "value": "t_struct(Letter)844_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(Annex)829_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct Vault.Annex)",
        "numberOfBytes": "32",
        "value": "t_struct(Annex)829_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Annex)829_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Annex",
        "members": [
          {
            "astId": 822,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_type",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 824,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_address",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 826,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 828,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Letter)844_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Letter",
        "members": [
          {
            "astId": 831,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 833,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 835,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_annexAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 839,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_message",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 841,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_secretWords",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 843,
            "contract": "contracts/Vault.sol:Vault",
            "label": "_password",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}