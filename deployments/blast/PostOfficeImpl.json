{
  "address": "0x11ac5eedd77f5F5Cf50f0BEd8273724cbDB56c8c",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_annexKeys",
          "type": "bytes[]"
        }
      ],
      "name": "SendLetter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "name": "TimeoutClaim",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLAST_YIELD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC1155_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC20_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC721_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDB",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "annex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "internalType": "struct PostOffice.Annex[]",
          "name": "_annex",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PostOffice.PayInfo",
          "name": "_payInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "buildId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimAllYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMyContractsGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "letters",
      "outputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_annexAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PostOffice.PayInfo",
          "name": "_payInfo",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            }
          ],
          "internalType": "struct PostOffice.Annex[]",
          "name": "_annex",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PostOffice.PayInfo",
          "name": "_payInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "sendLetter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_letterId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "timeoutClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
  "receipt": {
    "to": null,
    "from": "0x37D2AC60E6fB6B0c54969f75D10245Bff815bce3",
    "contractAddress": "0x11ac5eedd77f5F5Cf50f0BEd8273724cbDB56c8c",
    "transactionIndex": 7,
    "gasUsed": "2174327",
    "logsBloom": "0x
    "blockHash": "0x58da58665e559ddd759f36756bbeb6136dc46b8ac143dbef6c3331ce0bea34cf",
    "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 1651560,
        "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
        "address": "0x11ac5eedd77f5F5Cf50f0BEd8273724cbDB56c8c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000037d2ac60e6fb6b0c54969f75d10245bff815bce3"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x58da58665e559ddd759f36756bbeb6136dc46b8ac143dbef6c3331ce0bea34cf"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 1651560,
        "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
        "address": "0x4200000000000000000000000000000000000022",
        "topics": [
          "0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36",
          "0x00000000000000000000000027288e663371559f2582622d657a0df8c21b4961"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 12,
        "blockHash": "0x58da58665e559ddd759f36756bbeb6136dc46b8ac143dbef6c3331ce0bea34cf"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 1651560,
        "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
        "address": "0x4200000000000000000000000000000000000023",
        "topics": [
          "0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36",
          "0x00000000000000000000000027288e663371559f2582622d657a0df8c21b4961"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 13,
        "blockHash": "0x58da58665e559ddd759f36756bbeb6136dc46b8ac143dbef6c3331ce0bea34cf"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 1651560,
        "transactionHash": "0xe85b1be3d4c0957459b2b8934148d22ee160e3b4a8cf10c375e4a7d05c1c2921",
        "address": "0x11ac5eedd77f5F5Cf50f0BEd8273724cbDB56c8c",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 14,
        "blockHash": "0x58da58665e559ddd759f36756bbeb6136dc46b8ac143dbef6c3331ce0bea34cf"
      }
    ],
    "blockNumber": 1651560,
    "cumulativeGasUsed": "3033511",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0f816e88b3c009af7682571fd8a711d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_annexKeys\",\"type\":\"bytes[]\"}],\"name\":\"SendLetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"name\":\"TimeoutClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLAST_YIELD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1155_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDB\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"annex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"internalType\":\"struct PostOffice.Annex[]\",\"name\":\"_annex\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PostOffice.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"buildId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimAllYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMyContractsGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"letters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annexAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PostOffice.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"internalType\":\"struct PostOffice.Annex[]\",\"name\":\"_annex\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PostOffice.PayInfo\",\"name\":\"_payInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"sendLetter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_letterId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"timeoutClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PostOffice.sol\":\"PostOffice\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/PostOffice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./lib/BlastReward.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract PostOffice is ERC721Holder, ERC1155Holder, BlastReward {\\n    uint8 public constant ETH_TYPE = 0;\\n    uint8 public constant ERC20_TYPE = 1;\\n    uint8 public constant ERC721_TYPE = 2;\\n    uint8 public constant ERC1155_TYPE = 3;\\n\\n    event SendLetter(bytes32 _letterId, address _sender, address _receiver, bytes[] _annexKeys);\\n    event Claim(bytes32 _letterId);\\n    event TimeoutClaim(bytes32 _letterId);\\n\\n    struct Annex {\\n        uint8 _type;\\n        address _address;\\n        uint256 _amount;\\n        uint256 _id;\\n    }\\n\\n    struct PayInfo {\\n        address _token;\\n        uint256 _amount;\\n    }\\n\\n    struct Letter {\\n        address _sender;\\n        address _receiver;\\n        uint256 _annexAmount;\\n        PayInfo _payInfo;\\n        uint256 _deadline;\\n    }\\n\\n    mapping(bytes32 => Letter) public letters;\\n    mapping(bytes => Annex) public annex;\\n\\n    function initialize() public override initializer {\\n        __Ownable_init(msg.sender);\\n        super.initialize();\\n    }\\n\\n    function sendLetter(Annex[] memory _annex, PayInfo memory _payInfo, address _receiver, uint256 _deadline) external payable returns (bytes32 _letterId) {\\n        _letterId = buildId(_annex, _payInfo, _receiver, _deadline);\\n\\n        bytes[] memory _keys = new bytes[](_annex.length);\\n\\n        for (uint256 _i = 0; _i < _annex.length; _i++) {\\n            if (_annex[_i]._type == ETH_TYPE) require(msg.value >= _annex[_i]._amount, \\\"PostOffice: Insufficient amount of eth\\\");\\n            if (_annex[_i]._type == ERC20_TYPE) IERC20(_annex[_i]._address).transferFrom(msg.sender, address(this), _annex[_i]._amount);\\n            if (_annex[_i]._type == ERC721_TYPE) IERC721(_annex[_i]._address).transferFrom(msg.sender, address(this), _annex[_i]._id);\\n            if (_annex[_i]._type == ERC1155_TYPE) IERC1155(_annex[_i]._address).safeTransferFrom(msg.sender, address(this), _annex[_i]._id, _annex[_i]._amount, new bytes(0));\\n            bytes memory _annexKey = abi.encodePacked(_letterId, _i);\\n            annex[_annexKey] = _annex[_i];\\n            _keys[_i] = _annexKey;\\n        }\\n\\n        Letter memory _letter = Letter({ _sender: msg.sender, _annexAmount: _annex.length, _receiver: _receiver, _payInfo: _payInfo, _deadline: _deadline });\\n        letters[_letterId] = _letter;\\n        emit SendLetter(_letterId, msg.sender, _receiver, _keys);\\n    }\\n\\n    function claim(bytes32 _id) external {\\n        Letter memory _letter = letters[_id];\\n        delete letters[_id];\\n\\n        require(_letter._receiver == msg.sender, \\\"PostOffice: You are not the recipient\\\");\\n        require(_letter._deadline > block.timestamp, \\\"PostOffice: Letter has timed out\\\");\\n\\n        IERC20(_letter._payInfo._token).transferFrom(msg.sender, _letter._sender, _letter._payInfo._amount);\\n\\n        for (uint256 _i = 0; _i < _letter._annexAmount; _i++) {\\n            bytes memory _annexId = abi.encodePacked(_id, _i);\\n            Annex memory _annex = annex[_annexId];\\n            if (_annex._type == ETH_TYPE) payable(msg.sender).transfer(_annex._amount);\\n            if (_annex._type == ERC20_TYPE) IERC20(_annex._address).transfer(msg.sender, _annex._amount);\\n            if (_annex._type == ERC721_TYPE) IERC721(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id);\\n            if (_annex._type == ERC1155_TYPE) IERC1155(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id, _annex._amount, new bytes(0));\\n            delete annex[_annexId];\\n        }\\n        emit Claim(_id);\\n    }\\n\\n    function timeoutClaim(bytes32 _id) external {\\n        Letter memory _letter = letters[_id];\\n        delete letters[_id];\\n\\n        require(_letter._sender == msg.sender, \\\"PostOffice: You are not the sender\\\");\\n        require(_letter._deadline < block.timestamp, \\\"PostOffice: The letter has not expired yet\\\");\\n\\n        for (uint256 _i = 0; _i < _letter._annexAmount; _i++) {\\n            bytes memory _annexId = abi.encodePacked(_id, _i);\\n            Annex memory _annex = annex[_annexId];\\n            if (_annex._type == ETH_TYPE) payable(msg.sender).transfer(_annex._amount);\\n            if (_annex._type == ERC20_TYPE) IERC20(_annex._address).transfer(msg.sender, _annex._amount);\\n            if (_annex._type == ERC721_TYPE) IERC721(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id);\\n            if (_annex._type == ERC1155_TYPE) IERC1155(_annex._address).safeTransferFrom(address(this), msg.sender, _annex._id, _annex._amount, new bytes(0));\\n            delete annex[_annexId];\\n        }\\n        emit TimeoutClaim(_id);\\n    }\\n\\n    function buildId(Annex[] memory _annex, PayInfo memory _payInfo, address _receiver, uint256 _deadline) public view returns (bytes32) {\\n        return keccak256(abi.encode(_annex, _payInfo, _receiver, _deadline, block.prevrandao, block.timestamp));\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x99bfac263b054dafb23aec08e23c3b429ad2fa5ad338730e4c34a5063bc93484\",\"license\":\"MIT\"},\"contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE\\n}\\n\\ninterface IBlast {\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n\\n    function configureAutomaticYield() external;\\n\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n\\n    function configureVoidYield() external;\\n\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n\\n    function configureClaimableGas() external;\\n\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n\\n    function configureVoidGas() external;\\n\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n\\n    function configureGovernor(address _governor) external;\\n\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\",\"keccak256\":\"0xdaff1fd09e4cbd5b55b26f110db754303dce5a3066507c5ca5fc61c11765248b\",\"license\":\"MIT\"},\"contracts/lib/BlastReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interface/IBlast.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IERC20Rebasing {\\n    // changes the yield mode of the caller and update the balance\\n    // to reflect the configuration\\n    function configure(YieldMode) external returns (uint256);\\n\\n    // \\\"claimable\\\" yield mode accounts can call this this claim their yield\\n    // to another address\\n    function claim(address recipient, uint256 amount) external returns (uint256);\\n\\n    // read the claimable amount for an account\\n    function getClaimableAmount(address account) external view returns (uint256);\\n}\\n\\ncontract BlastReward is OwnableUpgradeable {\\n    address public constant BLAST_YIELD = 0x4300000000000000000000000000000000000002;\\n\\n    // NOTE: these addresses will be slightly different on the Blast mainnet\\n    IERC20Rebasing public constant USDB = IERC20Rebasing(0x4200000000000000000000000000000000000022);\\n    IERC20Rebasing public constant WETH = IERC20Rebasing(0x4200000000000000000000000000000000000023);\\n\\n    function initialize() public virtual {\\n        USDB.configure(YieldMode.CLAIMABLE); //configure claimable yield for USDB\\n        WETH.configure(YieldMode.CLAIMABLE); //configure claimable yield for WETH\\n        IBlast(BLAST_YIELD).configureClaimableYield();\\n        IBlast(BLAST_YIELD).configureClaimableGas();\\n    }\\n\\n    constructor() {\\n        initialize();\\n    }\\n\\n    function claimYield(address recipient, uint256 amount) external onlyOwner {\\n        //This function is public meaning anyone can claim the yield\\n        IBlast(BLAST_YIELD).claimYield(address(this), recipient, amount);\\n    }\\n\\n    function claimAllYield(address recipient) external onlyOwner {\\n        //This function is public meaning anyone can claim the yield\\n        IBlast(BLAST_YIELD).claimAllYield(address(this), recipient);\\n    }\\n\\n    function claimMyContractsGas() external onlyOwner {\\n        IBlast(BLAST_YIELD).claimAllGas(address(this), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x89a9c1e79486f3347a4ffe81b696baa3f1080b395a3212ec6708ad3a9289d4fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b6200047b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b03166000811580156200006d5750825b90506000826001600160401b031660011480156200008a5750303b155b90508115801562000099575080155b15620000b85760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000e757845460ff60401b1916680100000000000000001785555b620000f2336200014a565b620000fc62000162565b83156200014357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6200015462000338565b6200015f8162000389565b50565b604051631a33757d60e01b815273420000000000000000000000000000000000002290631a33757d906200019c9060029060040162000438565b6020604051808303816000875af1158015620001bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e2919062000461565b50604051631a33757d60e01b815273420000000000000000000000000000000000002390631a33757d906200021d9060029060040162000438565b6020604051808303816000875af11580156200023d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000263919062000461565b507343000000000000000000000000000000000000026001600160a01b031663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620002b457600080fd5b505af1158015620002c9573d6000803e3d6000fd5b505050507343000000000000000000000000000000000000026001600160a01b0316634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200031d57600080fd5b505af115801562000332573d6000803e3d6000fd5b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166200038757604051631afcd79f60e31b815260040160405180910390fd5b565b6200039362000338565b6001600160a01b038116620003c257604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200015f817f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60208101600383106200045b57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156200047457600080fd5b5051919050565b6122d9806200048b6000396000f3fe60806040526004361061014f5760003560e01c806377d5d2dc116100b6578063bc197c811161006f578063bc197c811461048f578063bd66528a146104bb578063c2d94aec146104db578063cfc37a6e146104fb578063f23a6e6114610516578063f2fde38b1461054257600080fd5b806377d5d2dc146103d85780638129fc1c146103ed5780638da5cb5b14610402578063916e4ed11461043f578063ad5c464814610454578063b79744711461046f57600080fd5b80633be3f445116101085780633be3f445146102da57806354b69269146103085780636a59fb34146103865780636f3769c014610399578063715018a6146103ae57806372798a89146103c357600080fd5b806301ffc9a71461015b57806304f335cf14610190578063150b7a021461021a5780631869ebda1461025e5780632480aa421461028057806331a0edec146102a757600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b610176366004611a82565b610562565b60405190151581526020015b60405180910390f35b34801561019c57600080fd5b506101ee6101ab366004611b90565b80516020818301810180516001808352938301929094019190912092905281549082015460029092015460ff8216926101009092046001600160a01b0316919084565b6040805160ff90951685526001600160a01b039093166020850152918301526060820152608001610187565b34801561022657600080fd5b50610245610235366004611be8565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610187565b34801561026a57600080fd5b5061027e610279366004611c4f565b610599565b005b34801561028c57600080fd5b50610295600081565b60405160ff9091168152602001610187565b3480156102b357600080fd5b506102c26022602160991b0181565b6040516001600160a01b039091168152602001610187565b3480156102e657600080fd5b506102fa6102f5366004611cf2565b610617565b604051908152602001610187565b34801561031457600080fd5b50610375610323366004611e02565b60006020818152918152604090819020805460018201546002830154845180860190955260038401546001600160a01b0390811686526004850154968601969096526005909301549185169416929085565b604051610187959493929190611e1b565b6102fa610394366004611cf2565b610654565b3480156103a557600080fd5b50610295600181565b3480156103ba57600080fd5b5061027e610bf8565b3480156103cf57600080fd5b50610295600281565b3480156103e457600080fd5b5061027e610c0c565b3480156103f957600080fd5b5061027e610c85565b34801561040e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102c2565b34801561044b57600080fd5b50610295600381565b34801561046057600080fd5b506102c26023602160991b0181565b34801561047b57600080fd5b5061027e61048a366004611e02565b610d9a565b34801561049b57600080fd5b506102456104aa366004611ed0565b63bc197c8160e01b95945050505050565b3480156104c757600080fd5b5061027e6104d6366004611e02565b611219565b3480156104e757600080fd5b5061027e6104f6366004611f79565b611702565b34801561050757600080fd5b506102c26002604360981b0181565b34801561052257600080fd5b50610245610531366004611f94565b63f23a6e6160e01b95945050505050565b34801561054e57600080fd5b5061027e61055d366004611f79565b611785565b60006001600160e01b03198216630271189760e51b148061059357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105a16117c0565b604051637cb8cb3160e11b81526002604360981b019063f9719662906105cf90309086908690600401611ff8565b6020604051808303816000875af11580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610612919061201c565b505050565b600084848484444260405160200161063496959493929190612035565b604051602081830303815290604052805190602001209050949350505050565b600061066285858585610617565b9050600085516001600160401b0381111561067f5761067f611ab3565b6040519080825280602002602001820160405280156106b257816020015b606081526020019060019003908161069d5790505b50905060005b8651811015610b1657600060ff168782815181106106d8576106d86120e7565b60200260200101516000015160ff160361076d578681815181106106fe576106fe6120e7565b60200260200101516040015134101561076d5760405162461bcd60e51b815260206004820152602660248201527f506f73744f66666963653a20496e73756666696369656e7420616d6f756e74206044820152650decc40cae8d60d31b60648201526084015b60405180910390fd5b600160ff16878281518110610784576107846120e7565b60200260200101516000015160ff1603610847578681815181106107aa576107aa6120e7565b6020026020010151602001516001600160a01b03166323b872dd33308a85815181106107d8576107d86120e7565b6020026020010151604001516040518463ffffffff1660e01b815260040161080293929190611ff8565b6020604051808303816000875af1158015610821573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084591906120fd565b505b600260ff1687828151811061085e5761085e6120e7565b60200260200101516000015160ff160361090f57868181518110610884576108846120e7565b6020026020010151602001516001600160a01b03166323b872dd33308a85815181106108b2576108b26120e7565b6020026020010151606001516040518463ffffffff1660e01b81526004016108dc93929190611ff8565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050505b600360ff16878281518110610926576109266120e7565b60200260200101516000015160ff1603610a3b5786818151811061094c5761094c6120e7565b6020026020010151602001516001600160a01b031663f242432a33308a858151811061097a5761097a6120e7565b6020026020010151606001518b8681518110610998576109986120e7565b60200260200101516040015160006001600160401b038111156109bd576109bd611ab3565b6040519080825280601f01601f1916602001820160405280156109e7576020820181803683370190505b506040518663ffffffff1660e01b8152600401610a0895949392919061216f565b600060405180830381600087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050505b60408051602081018590529081018290526000906060016040516020818303038152906040529050878281518110610a7557610a756120e7565b6020026020010151600182604051610a8d91906121b4565b9081526040805191829003602090810190922083518154938501516001600160a01b0316610100026001600160a81b031990941660ff90911617929092178255820151600182015560609091015160029091015582518190849084908110610af757610af76120e7565b6020026020010181905250508080610b0e906121d0565b9150506106b8565b506040805160a081018252338082526001600160a01b0387811660208085019182528b51858701908152606086018c8152608087018b815260008b8152808552899020885181549088166001600160a01b0319918216178255955160018201805491891691881691909117905592516002840155905180516003840180549190971695169490941790945591015160048201559051600590910155915190917fe681dee53a4e870bcaef63970bc1fb77925267c7e4c14f60e54725272d8cb79891610be6918691899087906121f7565b60405180910390a15050949350505050565b610c006117c0565b610c0a600061181b565b565b610c146117c0565b604051634aa7d2f760e11b81523060048201523360248201526002604360981b019063954fa5ee906044016020604051808303816000875af1158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c82919061201c565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610cca5750825b90506000826001600160401b03166001148015610ce65750303b155b905081158015610cf4575080155b15610d125760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d3c57845460ff60401b1916600160401b1785555b610d453361188c565b610d4d61189d565b8315610d9357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b600081815260208181526040808320815160a08101835281546001600160a01b038082168352600184018054808316858901526002860180548689015287518089019098526003870180548086168a526004890180548b8d0152606089019a909a5260058901805460808a01528d8d529a8c90526001600160a01b031996871690985591851690925590889055919093169055918490559290915580519091163314610e935760405162461bcd60e51b815260206004820152602260248201527f506f73744f66666963653a20596f7520617265206e6f74207468652073656e6460448201526132b960f11b6064820152608401610764565b42816080015110610ef95760405162461bcd60e51b815260206004820152602a60248201527f506f73744f66666963653a20546865206c657474657220686173206e6f7420656044820152691e1c1a5c9959081e595d60b21b6064820152608401610764565b60005b81604001518110156111e057604080516020810185905290810182905260009060600160405160208183030381529060405290506000600182604051610f4291906121b4565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150610fc7576040808201519051339180156108fc02916000818181858888f19350505050158015610fc5573d6000803e3d6000fd5b505b805160ff1660001901611053576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561102d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105191906120fd565b505b805160ff16600119016110cc5760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e916110999130913391600401611ff8565b600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050505b805160ff166002190161118f5780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561111157611111611ab3565b6040519080825280601f01601f19166020018201604052801561113b576020820181803683370190505b506040518663ffffffff1660e01b815260040161115c95949392919061216f565b600060405180830381600087803b15801561117657600080fd5b505af115801561118a573d6000803e3d6000fd5b505050505b60018260405161119f91906121b4565b90815260405190819003602001902080546001600160a81b0319168155600060018201819055600290910155508190506111d8816121d0565b915050610efc565b506040518281527fb7b05d3a6508c3fc98e29961e39eff690a7e939862c71ad741250a5d2d30d04c906020015b60405180910390a15050565b600081815260208181526040808320815160a08101835281546001600160a01b038082168352600184018054808316858901908152600287018054878a01528851808a019099526003880180548087168b5260048a0180548c8e015260608a019b909b5260058a01805460808b01528e8e529b8d90526001600160a01b03199788169099559286169093559189905592909416909155928590559390925590511633146113165760405162461bcd60e51b815260206004820152602560248201527f506f73744f66666963653a20596f7520617265206e6f742074686520726563696044820152641c1a595b9d60da1b6064820152608401610764565b428160800151116113695760405162461bcd60e51b815260206004820181905260248201527f506f73744f66666963653a204c6574746572206861732074696d6564206f75746044820152606401610764565b6060810151805182516020909201516040516323b872dd60e01b81526001600160a01b03909216926323b872dd926113a692339291600401611ff8565b6020604051808303816000875af11580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e991906120fd565b5060005b81604001518110156116d15760408051602081018590529081018290526000906060016040516020818303038152906040529050600060018260405161143391906121b4565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b031694830194909452600181015492820192909252600290910154606082015291506114b8576040808201519051339180156108fc02916000818181858888f193505050501580156114b6573d6000803e3d6000fd5b505b805160ff1660001901611544576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154291906120fd565b505b805160ff16600119016115bd5760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e9161158a9130913391600401611ff8565b600060405180830381600087803b1580156115a457600080fd5b505af11580156115b8573d6000803e3d6000fd5b505050505b805160ff16600219016116805780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561160257611602611ab3565b6040519080825280601f01601f19166020018201604052801561162c576020820181803683370190505b506040518663ffffffff1660e01b815260040161164d95949392919061216f565b600060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050505b60018260405161169091906121b4565b90815260405190819003602001902080546001600160a81b0319168155600060018201819055600290910155508190506116c9816121d0565b9150506113ed565b506040518281527f8c1d64e3bd87387709175b9ef4e7a1d7a8364559fc0e2ad9d77953909a0d1eb39060200161120d565b61170a6117c0565b60405163430021db60e11b81523060048201526001600160a01b03821660248201526002604360981b019063860043b6906044016020604051808303816000875af115801561175d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611781919061201c565b5050565b61178d6117c0565b6001600160a01b0381166117b757604051631e4fbdf760e01b815260006004820152602401610764565b610c828161181b565b336117f27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610c0a5760405163118cdaa760e01b8152336004820152602401610764565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611894611a31565b610c8281611a7a565b604051631a33757d60e01b81526022602160991b0190631a33757d906118c89060029060040161227b565b6020604051808303816000875af11580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b919061201c565b50604051631a33757d60e01b81526023602160991b0190631a33757d906119379060029060040161227b565b6020604051808303816000875af1158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a919061201c565b506002604360981b016001600160a01b031663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b505050506002604360981b016001600160a01b0316634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a1757600080fd5b505af1158015611a2b573d6000803e3d6000fd5b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c0a57604051631afcd79f60e31b815260040160405180910390fd5b61178d611a31565b600060208284031215611a9457600080fd5b81356001600160e01b031981168114611aac57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611aeb57611aeb611ab3565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611b1957611b19611ab3565b604052919050565b600082601f830112611b3257600080fd5b81356001600160401b03811115611b4b57611b4b611ab3565b611b5e601f8201601f1916602001611af1565b818152846020838601011115611b7357600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ba257600080fd5b81356001600160401b03811115611bb857600080fd5b611bc484828501611b21565b949350505050565b80356001600160a01b0381168114611be357600080fd5b919050565b60008060008060808587031215611bfe57600080fd5b611c0785611bcc565b9350611c1560208601611bcc565b92506040850135915060608501356001600160401b03811115611c3757600080fd5b611c4387828801611b21565b91505092959194509250565b60008060408385031215611c6257600080fd5b611c6b83611bcc565b946020939093013593505050565b60006001600160401b03821115611c9257611c92611ab3565b5060051b60200190565b600060408284031215611cae57600080fd5b604051604081018181106001600160401b0382111715611cd057611cd0611ab3565b604052905080611cdf83611bcc565b8152602083013560208201525092915050565b60008060008060a08587031215611d0857600080fd5b84356001600160401b03811115611d1e57600080fd5b8501601f81018713611d2f57600080fd5b80356020611d44611d3f83611c79565b611af1565b82815260079290921b8301810191818101908a841115611d6357600080fd5b938201935b83851015611dd1576080858c031215611d815760008081fd5b611d89611ac9565b853560ff81168114611d9b5760008081fd5b8152611da8868501611bcc565b818501526040868101359082015260608087013590820152825260809094019390820190611d68565b9750611de1905089898301611c9c565b9550505050611df260608601611bcc565b9396929550929360800135925050565b600060208284031215611e1457600080fd5b5035919050565b6001600160a01b038681168252851660208201526040810184905260c08101611e5a606083018580516001600160a01b03168252602090810151910152565b8260a08301529695505050505050565b600082601f830112611e7b57600080fd5b81356020611e8b611d3f83611c79565b82815260059290921b84018101918181019086841115611eaa57600080fd5b8286015b84811015611ec55780358352918301918301611eae565b509695505050505050565b600080600080600060a08688031215611ee857600080fd5b611ef186611bcc565b9450611eff60208701611bcc565b935060408601356001600160401b0380821115611f1b57600080fd5b611f2789838a01611e6a565b94506060880135915080821115611f3d57600080fd5b611f4989838a01611e6a565b93506080880135915080821115611f5f57600080fd5b50611f6c88828901611b21565b9150509295509295909350565b600060208284031215611f8b57600080fd5b611aac82611bcc565b600080600080600060a08688031215611fac57600080fd5b611fb586611bcc565b9450611fc360208701611bcc565b9350604086013592506060860135915060808601356001600160401b03811115611fec57600080fd5b611f6c88828901611b21565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561202e57600080fd5b5051919050565b60e08082528751908201819052600090602090610100840190828b01845b8281101561209b578151805160ff168552858101516001600160a01b031686860152604080820151908601526060908101519085015260809093019290840190600101612053565b505089516001600160a01b03168584019081526020808c0151910152509150506001600160a01b03861660608301528460808301528360a08301528260c0830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561210f57600080fd5b81518015158114611aac57600080fd5b60005b8381101561213a578181015183820152602001612122565b50506000910152565b6000815180845261215b81602086016020860161211f565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906121a990830184612143565b979650505050505050565b600082516121c681846020870161211f565b9190910192915050565b6000600182016121f057634e487b7160e01b600052601160045260246000fd5b5060010190565b600060808201868352602060018060a01b03808816828601528087166040860152506080606085015281855180845260a08601915060a08160051b870101935082870160005b8281101561226b57609f19888703018452612259868351612143565b9550928401929084019060010161223d565b50939a9950505050505050505050565b602081016003831061229d57634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220c0881d134f6461c4ca5e722d3a4135b79f5e90718ff7f95abc47e3a9afa405cb64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c806377d5d2dc116100b6578063bc197c811161006f578063bc197c811461048f578063bd66528a146104bb578063c2d94aec146104db578063cfc37a6e146104fb578063f23a6e6114610516578063f2fde38b1461054257600080fd5b806377d5d2dc146103d85780638129fc1c146103ed5780638da5cb5b14610402578063916e4ed11461043f578063ad5c464814610454578063b79744711461046f57600080fd5b80633be3f445116101085780633be3f445146102da57806354b69269146103085780636a59fb34146103865780636f3769c014610399578063715018a6146103ae57806372798a89146103c357600080fd5b806301ffc9a71461015b57806304f335cf14610190578063150b7a021461021a5780631869ebda1461025e5780632480aa421461028057806331a0edec146102a757600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b610176366004611a82565b610562565b60405190151581526020015b60405180910390f35b34801561019c57600080fd5b506101ee6101ab366004611b90565b80516020818301810180516001808352938301929094019190912092905281549082015460029092015460ff8216926101009092046001600160a01b0316919084565b6040805160ff90951685526001600160a01b039093166020850152918301526060820152608001610187565b34801561022657600080fd5b50610245610235366004611be8565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610187565b34801561026a57600080fd5b5061027e610279366004611c4f565b610599565b005b34801561028c57600080fd5b50610295600081565b60405160ff9091168152602001610187565b3480156102b357600080fd5b506102c26022602160991b0181565b6040516001600160a01b039091168152602001610187565b3480156102e657600080fd5b506102fa6102f5366004611cf2565b610617565b604051908152602001610187565b34801561031457600080fd5b50610375610323366004611e02565b60006020818152918152604090819020805460018201546002830154845180860190955260038401546001600160a01b0390811686526004850154968601969096526005909301549185169416929085565b604051610187959493929190611e1b565b6102fa610394366004611cf2565b610654565b3480156103a557600080fd5b50610295600181565b3480156103ba57600080fd5b5061027e610bf8565b3480156103cf57600080fd5b50610295600281565b3480156103e457600080fd5b5061027e610c0c565b3480156103f957600080fd5b5061027e610c85565b34801561040e57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102c2565b34801561044b57600080fd5b50610295600381565b34801561046057600080fd5b506102c26023602160991b0181565b34801561047b57600080fd5b5061027e61048a366004611e02565b610d9a565b34801561049b57600080fd5b506102456104aa366004611ed0565b63bc197c8160e01b95945050505050565b3480156104c757600080fd5b5061027e6104d6366004611e02565b611219565b3480156104e757600080fd5b5061027e6104f6366004611f79565b611702565b34801561050757600080fd5b506102c26002604360981b0181565b34801561052257600080fd5b50610245610531366004611f94565b63f23a6e6160e01b95945050505050565b34801561054e57600080fd5b5061027e61055d366004611f79565b611785565b60006001600160e01b03198216630271189760e51b148061059357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105a16117c0565b604051637cb8cb3160e11b81526002604360981b019063f9719662906105cf90309086908690600401611ff8565b6020604051808303816000875af11580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610612919061201c565b505050565b600084848484444260405160200161063496959493929190612035565b604051602081830303815290604052805190602001209050949350505050565b600061066285858585610617565b9050600085516001600160401b0381111561067f5761067f611ab3565b6040519080825280602002602001820160405280156106b257816020015b606081526020019060019003908161069d5790505b50905060005b8651811015610b1657600060ff168782815181106106d8576106d86120e7565b60200260200101516000015160ff160361076d578681815181106106fe576106fe6120e7565b60200260200101516040015134101561076d5760405162461bcd60e51b815260206004820152602660248201527f506f73744f66666963653a20496e73756666696369656e7420616d6f756e74206044820152650decc40cae8d60d31b60648201526084015b60405180910390fd5b600160ff16878281518110610784576107846120e7565b60200260200101516000015160ff1603610847578681815181106107aa576107aa6120e7565b6020026020010151602001516001600160a01b03166323b872dd33308a85815181106107d8576107d86120e7565b6020026020010151604001516040518463ffffffff1660e01b815260040161080293929190611ff8565b6020604051808303816000875af1158015610821573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084591906120fd565b505b600260ff1687828151811061085e5761085e6120e7565b60200260200101516000015160ff160361090f57868181518110610884576108846120e7565b6020026020010151602001516001600160a01b03166323b872dd33308a85815181106108b2576108b26120e7565b6020026020010151606001516040518463ffffffff1660e01b81526004016108dc93929190611ff8565b600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b505050505b600360ff16878281518110610926576109266120e7565b60200260200101516000015160ff1603610a3b5786818151811061094c5761094c6120e7565b6020026020010151602001516001600160a01b031663f242432a33308a858151811061097a5761097a6120e7565b6020026020010151606001518b8681518110610998576109986120e7565b60200260200101516040015160006001600160401b038111156109bd576109bd611ab3565b6040519080825280601f01601f1916602001820160405280156109e7576020820181803683370190505b506040518663ffffffff1660e01b8152600401610a0895949392919061216f565b600060405180830381600087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050505b60408051602081018590529081018290526000906060016040516020818303038152906040529050878281518110610a7557610a756120e7565b6020026020010151600182604051610a8d91906121b4565b9081526040805191829003602090810190922083518154938501516001600160a01b0316610100026001600160a81b031990941660ff90911617929092178255820151600182015560609091015160029091015582518190849084908110610af757610af76120e7565b6020026020010181905250508080610b0e906121d0565b9150506106b8565b506040805160a081018252338082526001600160a01b0387811660208085019182528b51858701908152606086018c8152608087018b815260008b8152808552899020885181549088166001600160a01b0319918216178255955160018201805491891691881691909117905592516002840155905180516003840180549190971695169490941790945591015160048201559051600590910155915190917fe681dee53a4e870bcaef63970bc1fb77925267c7e4c14f60e54725272d8cb79891610be6918691899087906121f7565b60405180910390a15050949350505050565b610c006117c0565b610c0a600061181b565b565b610c146117c0565b604051634aa7d2f760e11b81523060048201523360248201526002604360981b019063954fa5ee906044016020604051808303816000875af1158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c82919061201c565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610cca5750825b90506000826001600160401b03166001148015610ce65750303b155b905081158015610cf4575080155b15610d125760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d3c57845460ff60401b1916600160401b1785555b610d453361188c565b610d4d61189d565b8315610d9357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b600081815260208181526040808320815160a08101835281546001600160a01b038082168352600184018054808316858901526002860180548689015287518089019098526003870180548086168a526004890180548b8d0152606089019a909a5260058901805460808a01528d8d529a8c90526001600160a01b031996871690985591851690925590889055919093169055918490559290915580519091163314610e935760405162461bcd60e51b815260206004820152602260248201527f506f73744f66666963653a20596f7520617265206e6f74207468652073656e6460448201526132b960f11b6064820152608401610764565b42816080015110610ef95760405162461bcd60e51b815260206004820152602a60248201527f506f73744f66666963653a20546865206c657474657220686173206e6f7420656044820152691e1c1a5c9959081e595d60b21b6064820152608401610764565b60005b81604001518110156111e057604080516020810185905290810182905260009060600160405160208183030381529060405290506000600182604051610f4291906121b4565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b03169483019490945260018101549282019290925260029091015460608201529150610fc7576040808201519051339180156108fc02916000818181858888f19350505050158015610fc5573d6000803e3d6000fd5b505b805160ff1660001901611053576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561102d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105191906120fd565b505b805160ff16600119016110cc5760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e916110999130913391600401611ff8565b600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050505b805160ff166002190161118f5780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561111157611111611ab3565b6040519080825280601f01601f19166020018201604052801561113b576020820181803683370190505b506040518663ffffffff1660e01b815260040161115c95949392919061216f565b600060405180830381600087803b15801561117657600080fd5b505af115801561118a573d6000803e3d6000fd5b505050505b60018260405161119f91906121b4565b90815260405190819003602001902080546001600160a81b0319168155600060018201819055600290910155508190506111d8816121d0565b915050610efc565b506040518281527fb7b05d3a6508c3fc98e29961e39eff690a7e939862c71ad741250a5d2d30d04c906020015b60405180910390a15050565b600081815260208181526040808320815160a08101835281546001600160a01b038082168352600184018054808316858901908152600287018054878a01528851808a019099526003880180548087168b5260048a0180548c8e015260608a019b909b5260058a01805460808b01528e8e529b8d90526001600160a01b03199788169099559286169093559189905592909416909155928590559390925590511633146113165760405162461bcd60e51b815260206004820152602560248201527f506f73744f66666963653a20596f7520617265206e6f742074686520726563696044820152641c1a595b9d60da1b6064820152608401610764565b428160800151116113695760405162461bcd60e51b815260206004820181905260248201527f506f73744f66666963653a204c6574746572206861732074696d6564206f75746044820152606401610764565b6060810151805182516020909201516040516323b872dd60e01b81526001600160a01b03909216926323b872dd926113a692339291600401611ff8565b6020604051808303816000875af11580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e991906120fd565b5060005b81604001518110156116d15760408051602081018590529081018290526000906060016040516020818303038152906040529050600060018260405161143391906121b4565b9081526040805160209281900383018120608082018352805460ff81168084526101009091046001600160a01b031694830194909452600181015492820192909252600290910154606082015291506114b8576040808201519051339180156108fc02916000818181858888f193505050501580156114b6573d6000803e3d6000fd5b505b805160ff1660001901611544576020810151604080830151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154291906120fd565b505b805160ff16600119016115bd5760208101516060820151604051632142170760e11b81526001600160a01b03909216916342842e0e9161158a9130913391600401611ff8565b600060405180830381600087803b1580156115a457600080fd5b505af11580156115b8573d6000803e3d6000fd5b505050505b805160ff16600219016116805780602001516001600160a01b031663f242432a30338460600151856040015160006001600160401b0381111561160257611602611ab3565b6040519080825280601f01601f19166020018201604052801561162c576020820181803683370190505b506040518663ffffffff1660e01b815260040161164d95949392919061216f565b600060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050505b60018260405161169091906121b4565b90815260405190819003602001902080546001600160a81b0319168155600060018201819055600290910155508190506116c9816121d0565b9150506113ed565b506040518281527f8c1d64e3bd87387709175b9ef4e7a1d7a8364559fc0e2ad9d77953909a0d1eb39060200161120d565b61170a6117c0565b60405163430021db60e11b81523060048201526001600160a01b03821660248201526002604360981b019063860043b6906044016020604051808303816000875af115801561175d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611781919061201c565b5050565b61178d6117c0565b6001600160a01b0381166117b757604051631e4fbdf760e01b815260006004820152602401610764565b610c828161181b565b336117f27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610c0a5760405163118cdaa760e01b8152336004820152602401610764565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b611894611a31565b610c8281611a7a565b604051631a33757d60e01b81526022602160991b0190631a33757d906118c89060029060040161227b565b6020604051808303816000875af11580156118e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190b919061201c565b50604051631a33757d60e01b81526023602160991b0190631a33757d906119379060029060040161227b565b6020604051808303816000875af1158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a919061201c565b506002604360981b016001600160a01b031663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b505050506002604360981b016001600160a01b0316634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a1757600080fd5b505af1158015611a2b573d6000803e3d6000fd5b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610c0a57604051631afcd79f60e31b815260040160405180910390fd5b61178d611a31565b600060208284031215611a9457600080fd5b81356001600160e01b031981168114611aac57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611aeb57611aeb611ab3565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611b1957611b19611ab3565b604052919050565b600082601f830112611b3257600080fd5b81356001600160401b03811115611b4b57611b4b611ab3565b611b5e601f8201601f1916602001611af1565b818152846020838601011115611b7357600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ba257600080fd5b81356001600160401b03811115611bb857600080fd5b611bc484828501611b21565b949350505050565b80356001600160a01b0381168114611be357600080fd5b919050565b60008060008060808587031215611bfe57600080fd5b611c0785611bcc565b9350611c1560208601611bcc565b92506040850135915060608501356001600160401b03811115611c3757600080fd5b611c4387828801611b21565b91505092959194509250565b60008060408385031215611c6257600080fd5b611c6b83611bcc565b946020939093013593505050565b60006001600160401b03821115611c9257611c92611ab3565b5060051b60200190565b600060408284031215611cae57600080fd5b604051604081018181106001600160401b0382111715611cd057611cd0611ab3565b604052905080611cdf83611bcc565b8152602083013560208201525092915050565b60008060008060a08587031215611d0857600080fd5b84356001600160401b03811115611d1e57600080fd5b8501601f81018713611d2f57600080fd5b80356020611d44611d3f83611c79565b611af1565b82815260079290921b8301810191818101908a841115611d6357600080fd5b938201935b83851015611dd1576080858c031215611d815760008081fd5b611d89611ac9565b853560ff81168114611d9b5760008081fd5b8152611da8868501611bcc565b818501526040868101359082015260608087013590820152825260809094019390820190611d68565b9750611de1905089898301611c9c565b9550505050611df260608601611bcc565b9396929550929360800135925050565b600060208284031215611e1457600080fd5b5035919050565b6001600160a01b038681168252851660208201526040810184905260c08101611e5a606083018580516001600160a01b03168252602090810151910152565b8260a08301529695505050505050565b600082601f830112611e7b57600080fd5b81356020611e8b611d3f83611c79565b82815260059290921b84018101918181019086841115611eaa57600080fd5b8286015b84811015611ec55780358352918301918301611eae565b509695505050505050565b600080600080600060a08688031215611ee857600080fd5b611ef186611bcc565b9450611eff60208701611bcc565b935060408601356001600160401b0380821115611f1b57600080fd5b611f2789838a01611e6a565b94506060880135915080821115611f3d57600080fd5b611f4989838a01611e6a565b93506080880135915080821115611f5f57600080fd5b50611f6c88828901611b21565b9150509295509295909350565b600060208284031215611f8b57600080fd5b611aac82611bcc565b600080600080600060a08688031215611fac57600080fd5b611fb586611bcc565b9450611fc360208701611bcc565b9350604086013592506060860135915060808601356001600160401b03811115611fec57600080fd5b611f6c88828901611b21565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561202e57600080fd5b5051919050565b60e08082528751908201819052600090602090610100840190828b01845b8281101561209b578151805160ff168552858101516001600160a01b031686860152604080820151908601526060908101519085015260809093019290840190600101612053565b505089516001600160a01b03168584019081526020808c0151910152509150506001600160a01b03861660608301528460808301528360a08301528260c0830152979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561210f57600080fd5b81518015158114611aac57600080fd5b60005b8381101561213a578181015183820152602001612122565b50506000910152565b6000815180845261215b81602086016020860161211f565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906121a990830184612143565b979650505050505050565b600082516121c681846020870161211f565b9190910192915050565b6000600182016121f057634e487b7160e01b600052601160045260246000fd5b5060010190565b600060808201868352602060018060a01b03808816828601528087166040860152506080606085015281855180845260a08601915060a08160051b870101935082870160005b8281101561226b57609f19888703018452612259868351612143565b9550928401929084019060010161223d565b50939a9950505050505050505050565b602081016003831061229d57634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220c0881d134f6461c4ca5e722d3a4135b79f5e90718ff7f95abc47e3a9afa405cb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1093,
        "contract": "contracts/PostOffice.sol:PostOffice",
        "label": "letters",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Letter)1088_storage)"
      },
      {
        "astId": 1098,
        "contract": "contracts/PostOffice.sol:PostOffice",
        "label": "annex",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(Annex)1071_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Letter)1088_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PostOffice.Letter)",
        "numberOfBytes": "32",
        "value": "t_struct(Letter)1088_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(Annex)1071_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct PostOffice.Annex)",
        "numberOfBytes": "32",
        "value": "t_struct(Annex)1071_storage"
      },
      "t_struct(Annex)1071_storage": {
        "encoding": "inplace",
        "label": "struct PostOffice.Annex",
        "members": [
          {
            "astId": 1064,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_type",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1066,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_address",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1068,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1070,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Letter)1088_storage": {
        "encoding": "inplace",
        "label": "struct PostOffice.Letter",
        "members": [
          {
            "astId": 1078,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1080,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1082,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_annexAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1085,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_payInfo",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(PayInfo)1076_storage"
          },
          {
            "astId": 1087,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PayInfo)1076_storage": {
        "encoding": "inplace",
        "label": "struct PostOffice.PayInfo",
        "members": [
          {
            "astId": 1073,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1075,
            "contract": "contracts/PostOffice.sol:PostOffice",
            "label": "_amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}